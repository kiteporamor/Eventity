openapi: 3.0.1
info:
  title: Eventity API
  version: v1

paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResult"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"

  /api/auth/register:
    post:
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResult"
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"        
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"

  /api/events:
    post:
      tags:
        - Event
      security:
      - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/CreateEventRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/CreateEventRequestDto"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    get:
      tags:
        - Event
      security:
      - Bearer: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventResponseDto"
        500:
          description: Server Error

  /api/events/{id}:
    get:
      tags:
        - Event
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    put:
      tags:
        - Event
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateEventRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateEventRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateEventRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    delete:
      tags:
        - Event
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Success
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error

  /api/notifications:
    post:
      tags:
        - Notification
      security:
      - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/NotificationRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/NotificationRequestDto"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    get:
      tags:
        - Notification
      parameters:
        - name: participation_id
          in: query
          schema:
            type: string
            format: uuid
      security:
      - Bearer: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NotificationResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error

  /api/notifications/{id}:
    get:
      tags:
        - Notification
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    delete:
      tags:
        - Notification
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error


  /api/participations:
    post:
      tags:
        - Participation
      security:
      - Bearer: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParticipationRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/ParticipationRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/ParticipationRequestDto"
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipationResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
    get:
      tags:
        - Participation
      security:
      - Bearer: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParticipationResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error

  /api/participations/{id}:
    get:
      tags:
        - Participation
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipationResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
    put:
      tags:
        - Participation
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipationResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    patch:
      tags:
        - Participation
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationStatusRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationStatusRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateParticipationStatusRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParticipationResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
    delete:
      tags:
        - Participation
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error
          
  /api/participations_detailed:
    get:
      tags:
        - Participation
      security:
      - Bearer: []
      parameters:
        - name: organizer_login
          in: query
          schema:
            type: string
        - name: event_title
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserParticipationInfoResponseDto"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error


  /api/users/{id}:
    get:
      tags:
        - User
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
    put:
      tags:
        - User
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
          text/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
          application/*+json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponseDto"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
    delete:
      tags:
        - User
      security:
      - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Success
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        500:
          description: Server Error
        
  /api/users:
    get:
      tags:
        - User
      security:
      - Bearer: []
      parameters:
        - name: login
          in: query
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponseDto"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProblemDetails"
        500:
          description: Server Error

components:
  schemas:
    AuthResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        login:
          type: string
        role:
          $ref: "#/components/schemas/UserRoleEnum"
        token:
          type: string
          nullable: true
      additionalProperties: false

    CreateEventRequestDto:
      required:
        - address
        - dateTime
        - description
        - organizerId
        - title
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
        description:
          type: string
          minLength: 0
          maxLength: 1000
        dateTime:
          type: string
          format: date-time
        address:
          type: string
          minLength: 0
          maxLength: 200
        organizerId:
          type: string
          format: uuid
      additionalProperties: false

    ErrorResponseDto:
      type: object
      properties:
        message:
          type: string
          nullable: true
        details:
          type: string
          nullable: true
      additionalProperties: false

    EventResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        dateTime:
          type: string
          format: date-time
        address:
          type: string
          nullable: true
        organizerId:
          type: string
          format: uuid
      additionalProperties: false

    LoginRequestDto:
      type: object
      properties:
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false

    NotificationRequestDto:
      type: object
      properties:
        participationId:
          type: string
          format: uuid
      additionalProperties: false

    NotificationResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        participationId:
          type: string
          format: uuid
        text:
          type: string
          nullable: true
        sentAt:
          type: string
          format: date-time
      additionalProperties: false

    ParticipationRequestDto:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        role:
          $ref: "#/components/schemas/ParticipationRoleEnum"
        status:
          $ref: "#/components/schemas/ParticipationStatusEnum"
      additionalProperties: false

    ParticipationResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        role:
          $ref: "#/components/schemas/ParticipationRoleEnum"
        status:
          $ref: "#/components/schemas/ParticipationStatusEnum"
      additionalProperties: false

    ParticipationRoleEnum:
      type: integer
      format: int32
      enum:
        - Participant
        - Organizer
        - Left

    ParticipationStatusEnum:
      type: integer
      enum:
        - Invited
        - Accepted
        - Rejected

    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}

    RegisterRequestDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        role:
          $ref: "#/components/schemas/UserRoleEnum"
      additionalProperties: false

    UpdateEventRequestDto:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
          nullable: true
        description:
          type: string
          minLength: 0
          maxLength: 1000
          nullable: true
        dateTime:
          type: string
          format: date-time
          nullable: true
        address:
          type: string
          minLength: 0
          maxLength: 200
          nullable: true
      additionalProperties: false
      
    UserParticipationInfoResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        dateTime:
          type: string
          format: date-time
        address:
          type: string
          nullable: true
        organizerId:
          type: string
          format: uuid
        organizerLogin:
          type: string
          nullable: true
      additionalProperties: false

    UpdateParticipationRequestDto:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/ParticipationStatusEnum"
      additionalProperties: false
      
    UpdateParticipationStatusRequestDto:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/ParticipationStatusEnum"
      additionalProperties: false

    UpdateUserRequestDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          minLength: 3
          maxLength: 20
          nullable: true
        password:
          type: string
          minLength: 6
          maxLength: 100
          nullable: true
      additionalProperties: false

    User:
      required:
        - email
        - login
        - name
        - password
        - role
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        login:
          type: string
        password:
          type: string
        role:
          $ref: "#/components/schemas/UserRoleEnum"
      additionalProperties: false

    UserResponseDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        login:
          type: string
          nullable: true
        role:
          $ref: "#/components/schemas/UserRoleEnum"
      additionalProperties: false

    UserRoleEnum:
      type: integer
      enum:
        - User
        - Admin

  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT Bearer token **_only_**

security:
  - Bearer: []